Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
  branches:
    include:
      - master

# pool:
#   vmImage: 'windows-latest'

pool:
  vmImage: "macOS-10.14"

jobs:
  # - job: Check
  #   steps:
  #     - checkout: none
  #     - powershell: |
  #         if ("$(Build.SourceVersionMessage)" -match "\[\w+\] \w+ \(\d+.\d+.\d+\)") {
  #           exit 0
  #         }
  #         else {
  #           exit 1
  #         }
  - job: Firebase
    steps:
      - bash: |
          brew unlink node@6
          brew install firebase-cli

  # - job: Run
  #   # dependsOn: Check
  #   # condition: succeeded()
  #   continueOnError: true
  #   steps:
  #     - bash: git status
  #     - bash: |
  #         echo "test" >> testfile.test
  #         git add -A
  #         git commit -am 'git test'
  #         git push -f origin master
  #     - powershell: |
  #         if ("$(Build.SourceVersionMessage)" -notmatch "\[\w+\] \w+ \(\d+.\d+.\d+\)") {
  #           Write-Host "##vso[task.logissue type=error;]This is colored red!"
  #           Exit 1
  #         }
  #     - powershell: |
  #         Write-host "Hey!"
  #       condition: succeeded()
  #     - powershell: |
  #         Write-Host "Ney!"
      # - powershell: |
      #     $a = "Release"
      #     echo "##vso[task.setvariable variable=type;isOutput=true]$a"
      #   name: SetType
      # - powershell: |
      #     Write-Output "Hey!"
      #   condition: and(succeeded(), eq(variables['SetType.type'], 'Release'))
      #   name: BuildPipeline
      # - powershell: |

      # - powershell: Write-Host "##[warning] Hey!"
      # - powershell: Write-Host "##vso[task.logissue type=error;]This is colored red!"



  # - job: BadOne
  #   dependsOn: Check
  #   condition: failed()
  #   steps:
  #     - checkout: none
  #     - powershell: Write-Output ":("



  # steps:
  #   - powershell: Write-Output "$(Build.SourceVersionMessage)"

  #   - powershell: Write-Output "$(System.TeamFoundationCollectionUri)"

  #   - powershell: Write-Output "$(System.TeamProject)"

  #   - powershell: |
  #       $targetUrl = "$(System.TeamFoundationCollectionUri)$(System.TeamProject)/_apis"
  #       Write-Output $targetUrl
  # pr: none

  # variables:
  #   BuildUserHomeDir: /Users/runner
  #   AdvancedBuildDir: $(BuildUserHomeDir)/n
  #   HelloWorldFilePath: $(AdvancedBuildDir)/hello.txt
  #   envName: dev
  #   Version.MajorMinor: 2020
  #   a: $[counter(20, 000009)]

  # pool:
  #   vmImage: 'macos-10.14'


  # steps:
  #   - script: echo $()
  #   - powershell: env
  #   - powershell: |
  #       $buildMessage = (git log -1 --pretty=%B).Split()

  #       Write-Output $buildMessage
  #       Write-Output $buildMessage.GetType()

  #       $buildType = $buildMessage[0]
  #       $buildService = $buildMessage[1]
  #       $buildVersion = $buildMessage[2].Trim('()')

  #       Write-Output "Commit message - $buildMessage"
  #       Write-Output "Build type - $buildType"
  #       Write-Output "Build service - $buildService"
  #       Write-Output "Build version - $buildVersion"




  # # - bash: |
  # #     echo "$(Build.QueuedBy) - $(SetBuildVariables.buildType) - $(SetBuildVariables.buildConfiguration) - $(SetBuildVariables.fastlaneBuildCommand)" >> $(Build.Repository.LocalPath)/build.txt

  # # - bash: echo $(MobileAppPackageUri)

  # # - task: CopyFiles@2
  # #   inputs:
  # #     SourceFolder: $(Build.Repository.LocalPath)
  # #     contents: 'build.txt'
  # #     targetFolder: $(Build.ArtifactStagingDirectory)
  # # - task: PublishBuildArtifacts@1
  # #   inputs:
  # #     PathtoPublish: '$(Build.ArtifactStagingDirectory)'
  # #     ArtifactName: 'build_artifact'
