# schedules:
# - cron: "*/5 * * * * "
#   displayName: Run every 5 minutes
#   branches:
#     include:
#       - master
#   always: true

trigger: none
pr: none

pool:
  vmImage: "macOS-10.15"

variables:
  # - template: variables.yml
  group: my-vars-group
  testvar: pd/cvp/core/dev

jobs:
  - job: Run
    # condition: in(variables['Build.Reason'], 'Schedule', 'IndividualCI', 'Manual')
    # variables:
    #   env: 'dev'
    steps:
      # - bash: curl -sL https://firebase.tools | bash
      - bash: gem environment
      # - task: Cache@2
      #   inputs:
      #     key: 'cocoapods | "$(Agent.OS)" | Podfile'
      #     restoreKeys: cocoapods
      #     path: $(Pipeline.Workspace)/.cocoapods
      # - bash: pod install --repo-update
      # - bash: echo "$(Build.SourceBranchName)"
      #   displayName: Show build source branch name
      # - bash: echo "$(Build.SourceBranch)"
      #   displayName: Show build source branch
      # - bash: echo "Build source branch name contains"
      #   condition: contains(variables['testvar'], variables['Build.SourceBranchName'])
      # - template: platemplate.yml
      #   parameters:
      #     testParam:
      #       - master
      #       - pd/cvp/core/dev
      #       - pd/cvp/release/release-1.0.0
      # - bash: echo "i am $(iam)"
      # - template: ${{ variables.prefix }}template.yml
      # - bash: echo "we are $(iam)"
      # - template: proxytemplate.yml
      #   parameters:
      #   ${{ if startsWith(variables['Build.DefinitionName'], 'PD') }}:
      #     project: 'PD'
      #   ${{ if startsWith(variables['Build.DefinitionName'], 'PLA') }}:

      # - ${{ if startsWith(variables['Build.DefinitionName'], 'PD') }}:
      #   - powershell: echo "if PD"
      #   - template: pdtemplate.yml
      # - ${{ if eq(variables['prefix'], 'PLA') }}:
      #   - powershell: echo "if PLA"
      #   - template: platemplate.yml

      # - powershell: |
      #     $prefix = "$(Build.DefinitionName)".Split(".")[0]
      #     echo "##vso[task.setvariable variable=prefix;isOutput=true]$prefix"
      #   name: GetProject

      # - powershell: echo "$(GetProject.prefix)"
      # - bash: echo "$(prefix)"
      # - template: "${{ variables.prefix }}template.yml"



      # - template: proxytemplate.yml
      #   parameters:
      #     project: $(prefix)

      # - bash: echo "$(Build.DefinitionName)"
      # - bash: echo "$(Build.BuildUri)"
      # - bash: env
      # - template: template.yml
      #   parameters:
      #     yesNo: true
      # - powershell: echo "this is master"
      #   condition: eq(variables['Build.SourceBranch'], 'master')
      # - checkout: none
      # - bash: echo $(testBranch)