# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger: none
# pr: none

pool:
  vmImage: 'macos-10.14'

steps:

- script: echo Hello, world!
  displayName: 'Run a one-line script'

- powershell: |
    $configParams = @{
        "cvp-dev" = @{"buildType" = "Dev";  "buildConfiguration" = "Debug"};
        "cvp-stg" = @{"buildType" = "Stg";  "buildConfiguration" = "Debug"};
        "cvp-uat" = @{"buildType" = "Uat";  "buildConfiguration" = "Debug"};
        "cvp"     = @{"buildType" = "Prod"; "buildConfiguration" = "Release"};
        "cvp-ept" = @{"buildType" = "Ept";  "buildConfiguration" = "Debug"};
        "pla-pit" = @{"buildType" = "Dev";  "buildConfiguration" = "Debug"};
        "pla-mgr" = @{"buildType" = "Prod"; "buildConfiguration" = "Release"};
        "pla-dev" = @{"buildType" = "Prod";  "buildConfiguration" = "Release"};
        "pla-stg" = @{"buildType" = "Dev";  "buildConfiguration" = "Debug"};
        "pla-uat" = @{"buildType" = "Prod";  "buildConfiguration" = "Release"};
        "vst-dev" = @{"buildType" = "Dev";  "buildConfiguration" = "Debug"};
    }
    if ("$(MAPEnvName)" -In $configParams.Keys) {
        $buildType = $configParams."$(MAPEnvName)".buildType
        $buildConfiguration = $configParams."$(MAPEnvName)".buildConfiguration
        echo "##vso[task.setvariable variable=buildConfiguration;isOutput=true]$buildConfiguration"
        echo "##vso[task.setvariable variable=buildType;isOutput=true]$buildType"
    }
    else {
        Write-Error "Could not find build configuration settings for the provided environment: $(MAPEnvName)"
    }
  displayName: Show vars
  name: TestDict

- powershell: |
    Write-Output $(TestDict.buildType)
    Write-Output $(TestDict.buildConfiguration)
  displayName: Show test
- task: PowerShell@2
  name: SetBuildVariables
  displayName: Set environment-related variables
  inputs:
    targetType: inline
    script: |
      switch ("$(MAPEnvName)") {
        'cvp-dev' { 
            $fastlaneBuildCommand = "fastlane appface_build_dev";
            $buildConfiguration = "Release_Dev";
            $buildType = "Dev" 
        }
        'cvp-stg' { 
            $fastlaneBuildCommand = "fastlane appface_build_stg";
            $buildConfiguration = "Release_Dev";
            $buildType = "Stg" 
        }
        'cvp-uat' { 
            $fastlaneBuildCommand = "fastlane appface_build_uat";
            $buildConfiguration = "Release_Dev";
            $buildType = "Uat" 
        }
        'cvp' { 
            $fastlaneBuildCommand = "fastlane appface_build_prod";
            $buildConfiguration = "Release_Dev";
            $buildType = "Prod" 
        }
        'pla-pit' {
            $fastlaneBuildCommand = "fastlane appface_build_prod";
            $buildConfiguration = "Release_Dev";
            $buildType = "Prod" 
        }
        'pla-mgr' {
            $fastlaneBuildCommand = "fastlane appface_build_prod";
            $buildConfiguration = "Release_Dev";
            $buildType = "Prod" 
        }
        'pla-dev' {
            $fastlaneBuildCommand = "fastlane appface_build_prod";
            $buildConfiguration = "Release_Dev";
            $buildType = "Prod" 
        }
        'pla-stg' {
            $fastlaneBuildCommand = "fastlane appface_build_dev";
            $buildConfiguration = "Release_Dev";
            $buildType = "Dev" 
        }
        'pla-uat' {
            $fastlaneBuildCommand = "fastlane appface_build_prod";
            $buildConfiguration = "Release_Dev";
            $buildType = "Prod" 
        }  
        'vst-dev' { 
            $fastlaneBuildCommand = "fastlane appface_build_dev";
            $buildConfiguration = "Release_Dev";
            $buildType = "Dev" 
        }
      }

      echo "##vso[task.setvariable variable=buildConfiguration;isOutput=true]$buildConfiguration"
      echo "##vso[task.setvariable variable=fastlaneBuildCommand;isOutput=true]$fastlaneBuildCommand"
      echo "##vso[task.setvariable variable=buildType;isOutput=true]$buildType"

- powershell: |
    Write-Host $(SetBuildVariables.buildType)
    Write-Host $(SetBuildVariables.buildConfiguration)
    Write-Host $(SetBuildVariables.fastlaneBuildCommand)

- bash: |
    echo "$(Build.QueuedBy) - $(SetBuildVariables.buildType) - $(SetBuildVariables.buildConfiguration) - $(SetBuildVariables.fastlaneBuildCommand)" >> $(Build.Repository.LocalPath)/build.txt

- bash: echo $(MobileAppPackageUri)

- task: CopyFiles@2
  inputs:
    SourceFolder: $(Build.Repository.LocalPath)
    contents: 'build.txt'
    targetFolder: $(Build.ArtifactStagingDirectory)    
- task: PublishBuildArtifacts@1
  inputs:
    PathtoPublish: '$(Build.ArtifactStagingDirectory)'
    ArtifactName: 'build_artifact'
