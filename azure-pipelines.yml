# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger: none
# pr: none

pool:
  vmImage: 'macos-10.14'

steps:
- script: git checkout develop

- script: ls | grep *_branch

- script: echo Hello, world!
  displayName: 'Run a one-line script'

- powershell: |
    switch ("$(MAPEnvName)") {
      'cvp-dev' { 
          $fastlaneBuildCommand = "fastlane appface_build_dev";
          $buildConfiguration = "Release_Dev";
          $buildType = "Dev" 
      }
      'cvp-stg' { 
          $fastlaneBuildCommand = "fastlane appface_build_stg";
          $buildConfiguration = "Release_Dev";
          $buildType = "Stg" 
      }
    }
    
    echo "##vso[task.setvariable variable=buildConfiguration;isOutput=true]$buildConfiguration"
    echo "##vso[task.setvariable variable=fastlaneBuildCommand;isOutput=true]$fastlaneBuildCommand"
    echo "##vso[task.setvariable variable=buildType;isOutput=true]$buildType"
  name: SetBuildVars

- powershell: |
    Write-Host $(SetBuildVars.buildType)
    Write-Host $(SetBuildVars.buildConfiguration)
    Write-Host $(SetBuildVars.fastlaneBuildCommand)

- script: |
    echo Add other tasks to build, test, and deploy your project.
    echo See https://aka.ms/yaml
  displayName: 'Run a multi-line script'

- script: |
    echo "Show vars"
    echo "Definition name" 
    echo $(Build.DefinitionName)
    echo "Source branch"
    echo $(Build.SourceBranch)
    echo "Source branch name"
    echo $(Build.SourceBranchName)

- task: PowerShell@2
  name: setServiceParams
  inputs:
    targetType: inline
    script: |
      $buildDefinitionName = "BrightBoxHQ.Remoto.iOS.AuthService"
      $serviceName = $buildDefinitionName.Split('.')[-1]
      echo "##vso[task.setvariable variable=serviceName;isOutput=true]$serviceName"

- task: CopyFiles@2
  inputs:
    SourceFolder: $(Build.Repository.LocalPath)
    contents: '*_branch'
    targetFolder: $(Build.ArtifactStagingDirectory)    
- task: PublishBuildArtifacts@1
  inputs:
    PathtoPublish: '$(Build.ArtifactStagingDirectory)'
    ArtifactName: 'art'
